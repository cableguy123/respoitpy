unicode-bidi : 동일한 문서에서 여러 언어를 지원하도록 텍스트 방향 재정의.
vertical-align
text-transform:대 소문자 바꿔줌
text-indent: 들어쓰기 내어쓰기 내어쓰기는 첫줄제외 나머지줄이 설정한값만큼 왼쪽으로 이동
들어쓰기는 첫줄을 제외한 나머지는 그대로 둠
letter-spacing:글자 간격조절
line-height:줄 간격 지정
word-spacing:인라인 요소 ,인라인 블록 요소에 영향 단어에 간격조절
white-space:공간 여백 -normal  norwrap pre pre-wrap , pre-line n-공백1개만 표시 pre-공백그대로 표시 line은 1개만 표시
줄바꿈 norwrap,pre는 x안됌
div + p : div 에 속한 p태그 제외 p태그 첫줄만 적용
div > p : 부모 자식 
div ~ p : div 코드 적용 x
링크 색깔 클릭x 링크 a:link
방문한거 a:visited 
마우스 갖다댄거 hover
누르고있기 active
font properties
color properties
background properties
word-spacing
letter-spacing
text-decoration
vertical-align
text-transform
line-height
clear
css 적용 방법 3가지:
(1).inline style,2.내부 인라인 시트 , 외부 스타일 
우선순위는 1.인라인스타일 >> 2.내부/외부스타일시트(HTML에서 head요소내에 위치) >>> 3.웹 브라우저 기본 스타일
인라인 스타일 ex) !doctype html ~ html 
내부 스타일 시트 head ~ /head 안에 style
외부 스타일 시트 link 걸고 rel = href 주소






반드시 기억해야될 css 선택자


1.전체선택자 : *  ex) * { margin:0; padding:0} ! 실전에서는 브라우저에 과부하걸릴수있어 사용하지말길 권함
2.X+Y 인접 선택자 : X  다음에 오는 첫번쨰 Y만 선택 ex. div+p { color:red } 
3.X>Y 직계 후손 선택자 ex div > p : div 1단계 아래에 있는 p
4.X~Y 덜 엄격한 인접선택자: X다음에 오는 모든 Y 선택 : 같은계열에있어야됌 ex, h1 ~ h2
5.a[href*="naver"] : 주소창에 naver가 들어가는 모든앵커 태그 선택
6.a[href^="http"] : 주소가 http로 시작하는 앵커 태그선택 (^:시작 선택자 ) 
7.a[href$=".jpg"] : .jpg로 끝나는 url 앵커 태그 선택 ( $:마지막선택자 )
8.X[data-*="foo"] : 태그에 data- 와같은 커스텀 속성을 넣어 선택
ex a[data-filetype="Image"] {color:red} 
<a href="#" data-filetype="Image">Link here</a>
9.X[data-info~="image"] : 띄어쓰기 포함된 선택자 (~)
ex
<a href="#" data-info="external image">Link here</a>
10.X:not(Y) : 모든 X요소중 Y만 제외한 선택자
div:not(#container){color:blue}
아이디값 #container만 제외한 모든 div 선택
11: 가상요소 : :first-line과 :first-letter 그리고 :nth-last-child(n)/nth-last-of-type(n),first-line은 첫째줄,first-letter는 첫쨰문자,nth-last-child(n)는 끝에서부터 n번째를 선택한다
리스트 하옥이 너무많은 경우 (li) 끝에서부터 묶고싶을떄 nth-last-child 사용
12.X:only-child/ only-of-type
ex ) div p:only-child { color:red} 
<div>
<p>Hello my world</p>
</div>

가상요소
::after : 해당 태그의 뒤에 놓여진다
::before : 해당 태그의 앞에 놓여진다.
::first-letter : 해당 태그의 첫번쨰 문자에 놓여짐
::first-line :  해당태그의 첫번째 줄에 놓여짐
::selection : 해당 태그의 사용자가 더블클릭or드래그해서 선택한부분에 놓여짐
::backdrop : 해당 태그의 뒷배경
::placeholder  : 해당 태그의 폰트 꾸밈
::marker  : ol,li,ul 태그앞에 붙는 점을 꾸밈
::spelling-error  : 
::grammar-error 

가상클래스
:active : ex) a:active 활성화된 모든 <a>태그 선택
:any : 
:checked : 사용자가 요소를 체크했거나 선택한경우에 활성화 , 해제는 비활성화
:default  : input에서 씀  , checked와 같이씀
:dir() : ex :dir(rtl) 오른쪽에서 왼쪽으로 정렬
:disabled : 
:empty : 자식이 전혀없는 요소에 적용하는 선택자 
:enabled : input에도 disabled 표시할시 
:first :  @page : first 로 쓰임 출력시 첫페이지
:first-child : 형제 요소중 제일 첫 요소를 선택
:first-of-type : 형제 요소중 자신의 유형과 일치하는 제일 첫요소를 나타냄
:fullscreen :
:focus : 클릭시 바뀜 
:hover : 마우스 포인터 올리면 바뀜
:indeterminate : ex input:indeterminate + label { } 포인터로 상호작용시 원래로 돌아옴
:in-range : 범위를 정함 input min max로 근데 그 범위를 넘어가면 :out-of-range로 꾸미면됌
:invalid : <-> :valid도 있음 만약 그 input에 뭘타이핑했을시 invalid 타이밍 안하면 valid
:lang() : 문자 변환
:last-child  : ex p:last-child p의 마지막 자식요소가 선택됌  <p> <h2> 있을때는 적용  X
:last-of-type : 각 요소의 마지막 자식요소가 선택됌
:left : @page : left 그냥 페이지 왼쪽으로 옮김
:link : a:link 클릭한적있으면 link  없으면 표시안됌
:not() : 
:nth-child() : li:nth-child(2) 목록의 두번쨰  li 선택 ,  :nth-child(4n) :임의의그룹에서 네번째 위치하는 모든요소 선택 , :nth-child(odd) 홀수 선택 , :nth-child(even) 짝수 선택
:nth-last-child() : ex li:nth-last-child(x) 리스트의 마지막 요소로부터 x번째 요소 선택
:nth-last-of-type() : ex. E:nth-last-of-type(n) 맨마지막부터 계산하여 같은유형의 n번째 형제인 E요소 선택
ex. <div>
<p>내용1</p>
<p>내용2</p> p:nth-last-of-type(2)  = 내용1이 선택됌 <div>자식인 같은 유형의 두번째 형제 <p>를 선택
<p>내용3</p>
</div>
:nth-of-type() : p:nth-of-type(1) 부모안에 요소중 첫번쨰 p 선택
:only-child : 어떤 요소의 자식이 하나밖에없을때 적용 E:only-child 부모의 유일한 자식인 E요소 선택 
:first-child = 부모안에 모든요소중 첫번째 요소 선택

:only-of-type: E:only-of-type 같은 유형의 유일한 형제인 E요소 선택,같은유형의 형제가없을때 적용함
:optional 
:out-of-range
:read-only
:read-write
:required
:right
:root : E:root 문서의 최상위 단계 요소,html 요소임 
:scope
:target
:valid
:visited


css.레이아웃 배치 : 특정공간에 여러구성요소를 효과적으로 배치하는것을 말한다 css를이용하거나 table요소로 구성이 가능하다
요즘에는 table을 잘안씀
HTML 레이아웃 : <header>,<nav>,<section>,<article>,<aside>,<footer>,<details>,<summary>-<details>

1.float 
float 가장많이쓰는데 float된 레이아웃 하단에는 clear:both로 정리함 외에도 
display:table,display:inline-block 등 으로 레이아웃을 나눔
2.postion값으로 이동
부모요소에 position:relative 값을 주고 자식에 position:absolute 줘서 위치잡으면됌
float과 position값은 height값이 제대로 먹지않는경우가 많기에
3.flexbox
부모 요소에 display:flex; 선언하면 자식요소는 그대로 flex box가됨
flex-direction: column / row (나열 방향 결정)
flex(자식요소에) :  1/  * 110 * / (확대/축소 유동적으로 변경 + 자식요소정렬을 부모사이즈 기준으로 하겠다는의미 - 여러개일 경우 균등 분배 )
flex:auto/ *1 1 auto* / (이미지 박스를 유동적으로 반응할수있음,부모 크기에 영향을받음)

margin을 이용해 자식요소를 특정위치에 배치할수있음
margin-top : auto; 하면 페이지 최하단에 위치 (바닥에붙는 footer)
justify-content : 정렬 방식 선택 flex-start(기본값) ,center(중앙정렬),flex-end(주축 오른쪽기준 정렬),space-around(일정간격 정렬) , space-between(시작과끝에 하나씩정렬하고 나머지는 일정간격정렬)
align-items : center (타이틀 수직 중앙정렬)
flex-wrap : wrap (부모영역을 벗어 났을때 줄을 바꿔줌 ,위아래로 흐르는 목록)

4.grid
부모요소에 display:grid; 주고 grid-template-columns: 100px 100px 100px; (열의 너비)
grid-template-rows : 50px 50px (행의 높이)

background 축약
position과 size는 꼭슬래시로 구분 size만 사용할경우 position값 명시
background:color url("") no-repeat top
+ size 
background:color url("") no-repeat top / 100%

min-height
요소의 최소높이
요소의 height값이 min-height값보다 작아지는것을 방지
height 속성값을 무효화시킴 
/* margin 은 밖  padding은 안에서 */
margin: 0 auto 는 좌우 여백 사이즈를 동일하게 하겠다
width : min(100%,45rem); 요소의 최소 너비(좌우) 설정
object-fit:cover 가로세로비 유지하면서 요소콘텐츠 박스 가득 채우기,가로세로 안맞으면 객체일부잘림
margin-bottom:양수값은 인접요소와 거리를 넓히고 음수값은 더좁힘

margin:5px 7px 3px 0px // 위,오른쪽,아래 , 왼쪽
width:max-content 가로로 
width:min-content 세로로

margin-top,left,bottom,right 
-> 음수 값시 반대로(<-) 이동함 양수는 그대로 ->
즉 top은 음수값시 위로 올라감 양수값은 아래로
right는 음수값시 오른쪽으로  양수값시 왼쪽으로 
left는 음수값시 왼쪽으로  양수값시 오른쪽으로
bottom은 음수값시 ?
padding은?
padding-top은 음수값시 


 vertical-align:인라인요소,인라인 블록요소를 수직정렬할떄 씀
inline,inline-block 요소에만 적용
block요소인 div에는 작동 x 대신 div에 line-height 속성적용하고나서 middle쓰면 수직중앙정렬됌
-> inline요소는 baseline,sub,super,text-top,text-bottom,middle,top,bottom,길이값,%
table cell 속성값
-> top,middle,bottom

word-break,overflow-wrap,word-wrap 
텍스트의 줄바꿈처리함

flex-flow = flex-direction(row,column) + flex-wrap(row,reverse-row..)
justify : 메인축 = x축
align : 수직축 = y축
align-content : flex-wrap이 wrap으로 설정될떄 사용
---
flex-item 적용 속성
flex-basis = width
flex-grow ( 유연하게 늘리기) : 기본값은 0 
flex-shrink : 유연하게 줄이기 기본값은 1 
줄임법 flex : 1 = flex-grow 1 , flex-shrink: 1 , flex-basis: 0%
align-self : align-items의 아이템버전 align-items가 전체아이템의 y축이라면 align-self는 해당아이템의 y축
z-index : z축으로 정렬 숫자가 클수록 위로 올라옴
--- 
grid
grid-template-rows : 행 row
*
grid-template-columns : 열 column
* repeat(반복횟수,반복값) ex. repeat(5,1f) => 1fr 1fr 1fr 1fr 1fr
minmax(최소,최대) => minmax(100px,auto) 최소한 높이가 100px, 최대는 자동으로 auto 늘어나게
auto-fill : column의 개수를 미리정하지않고 설정된 너비가 허용하는 한 최대한 셀을 채움 셀의 개수가 모자라면 공간이나음
그래서 auto-fit을 사용하면 남는공간을 채움

--
그리드 셀 사이의 간격 row-gap,column-gap
gap : 1em 2em 
 row , column
--
그리드 형태를 자동으로 정의할떄
grid-auto-columns
grid-auto-rows :grid-template-row의 값을모를떄 알아서 처리해줌

grid-column-start : 시작번호 ex grid-column-start:1,end가 3 이면 grid-column 1 / 3 으로 축약가능
grid-column-end : 끝번호 
grid-column : start와 end 속성 축약형
grid-row-start
grid-row-end
grid-row
몇개의 셀을 차지하게될것인지 지정할수있음
ex) grid-column: 1 / span 2 : 1번라인에서 2칸
ex) grid-row : 1 / span 3 : 1번라인에서 3칸
grid-auto-columns를 이용할수있음 
------
grid-template-areas 영역이름으로 그리드정의 
: 각 영역에 이름을 붙이고 그 이름을 이용해서 배치하는방법
ex grid-template-areas : "header header header"
		"   a    main    b   "
		"   .     .      .   "
		"footer footer footer"; 이렇게 
.header { grid-area: header; }
.sidebar-a { grid-area: a; }
.main-content { grid-area: main; }
.sidebar-b { grid-area: b; }
.footer { grid-area: footer; }

grid-auto-flow: 아이템이 자동배치되는 흐름을 결정하는 속성
align-items : 가로 방향
justify-items  : 세로 방향
-> place-items: center start;
align-content : 아이템 그룹 가로 정렬
justify-content : 아이템그룹 세로 정렬
place-content : align,justify 
align-self : 한 아이템만 지정해서 가로 정렬
justify-self : 한 아이템만 지정해서 세로 정렬
place-self
z-index : 클수록 위로올라옴


--- media (반응형 웹디자인)
미디어 쿼리:CSs모듈중 하나로 사이트로 접속하는 장치에 따라 특정한 CSS스타일을 사용하도록 해주는 기능
ex)@media [only l not ] 미디어 유형 [ and 조건 ] * [ and 조건 ]
@media screen and (min-width:200px) and (max-width:360px) : 화면의 최소 너비가 200이고 최대가 360일경우 미디어 쿼리를 사용함
미디어 유형: 
all : 모든 유형
print : 인쇄 장치
screen : 컴퓨터 스크린(스마트폰의 스크린도 포함)
tv : tv
aural : 음성 합성 장치(화면을 읽어 소리로 출력해주는장치)
braille : 점자 표시 
handheld : pad 자이
projection : 프로젝터
tty : 디스플레이 기능이 제한된 장치 ! 이 장치에서는 px단위사용불가
embossed : 점자 프린터 

미디어 쿼리에서 사용하는 조건 
! 뷰포트 : 실제 웹문서의 내용이 화면에 보여지는 영역 
width/height : 웹페이지의 너비,높이
min-width / min-height :  최소 너비 ,최소 높이
max-width / max-height : 최대 너비, 최대 높이
----
단말기 
device-width / device-height : 단말기의 너비와 높이
min-device-width / min-device-height : 단말기의 최소 너비와 높이
max-device-width / max-device-height : 단말기의 최대 너비와 높이

---

3.화면회전

orientation:portrait 단말기의세로방향으로 ( = 뷰포트의 너비 < 높이 ) 
orientation : landscape 단말기의 가로 방향 ( = 뷰포트의 너비 > 높이 )

---

4. 화면 비율 
:브라우저 화면너비 값을 높이값으로 나눈것(width / height) 
ex @media all and (aspect-ratio:16/9) 뷰포트의 화면비율이 16:9면 미디어쿼리사용
속성은 aspect-ratio 화면비율(width/height)
min-aspect-ratio 최소 화면비율
max-aspect-ratio 최대 화면 비율

---

단말기 화면 비율 속성
device-aspect-ratio : 단말기 화면 비율
min-device-aspect-ratio 단말기 최소 화면 비율
max-device-aspect-ratio 단말기 최대 화면 비율
---
색상당 비트 수 
@media all and(color) 컬러를 지원하면 실행
@media all and(color:0) 컬러 지원 X -> 실행
속성은 color:비트수 min-color 최소 비트수 , max-color 최대 비트 수
---
적용방법은 <link href="css파일경로" rel="stylesheet" type="text/css" media="미디어 쿼리 조건">
@import url(css파일 경로) 미디어 쿼리조건

or 웹문서에서 직접정의하기
<style>안에서 media속성을 이용 조건,스타일 지정
ex <style media="미디어쿼리조건"> 
스타일 규칙들
</style>
or
<style>
@media 미디어 쿼리조건 { 스타일 규칙들 } </style>

----
뷰포트 지정하기
스마트폰에서 봤을때 pc화면이 그대로 축소되는경우가 있을때 <meta>를 이용해서  뷰포트 크기나 배율 조절
ex. <meta name=viewport content="속성1=값,속성2=값..">
<meta name="viewport" content="width=device-width">
뷰포트 속성
width : 뷰포트의 너비를 지정 기본값은 device-width
height : 뷰포트의 높이를 지정 기본값 device-height
initial-scale : 초기배율 기본값은 1 1보다 작으면 축소 1보다 크면 확대
user-scalable : 사용자가 페이지를 확대/축소할수있는지 여부를 표시 기본값은 yes no는 사용자가 확대/축소 X
minimum-scale : 사용자가 축소할수있는최솟값을 지정 기본값은 0.25,가로값을 기준
maximum-scale : 사용자가 확대할수있는 최댓값을 지정 기본값은 5.0
----

가변형 레이아웃 fluid Layout
사이트의 모든요소를 상대적인 크기로 지정해서 브라우저 크기에 따라서 다르게 표시해주는 방법
고정형 레이아웃을 가변형 레이아웃으로 만들기위해서
display:grid 하고 요소의 너비를 백분율 %로 바꾸기
padding,margin을 백분율로 바꾸기
글자크기를 em으로 바꾸기  1em은 16px=1em 
이미지나 비디오가 있는경우
max-width:100% 해주면 


